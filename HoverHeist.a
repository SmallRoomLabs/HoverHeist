
	processor 6502

NTSC		= 0
PAL50		= 1
PAL60		= 2

 IFNCONST COMPILE_VERSION
COMPILE_VERSION	= NTSC      ; change to compile for different regions
 ENDIF

;#############################################################################
;	include "colors.h"
;#############################################################################

BLACK           = $00
WHITE           = $0E
 IF COMPILE_VERSION = NTSC
GREY            = $00
YELLOW          = $10
ORANGE          = $20
RED_ORANGE      = $30
RED             = $40
PURPLE          = $50
VIOLET          = $60
INDIGO          = $70
BLUE            = $80
BLUE2           = $90
TURQUOISE       = $A0
CYAN            = $B0
GREEN           = $C0
YELLOW_GREEN    = $D0
OCHRE_GREEN     = $E0
OCHRE           = $F0
 ELSE
GREY            = $00
YELLOW          = $20   ; no real equivalent
ORANGE          = $20
RED_ORANGE      = $40
RED             = $60
PURPLE          = $80
VIOLET          = $A0
INDIGO          = $C0
BLUE            = $D0
BLUE2           = $B0
TURQUOISE       = $90
CYAN            = $70
GREEN           = $50
YELLOW_GREEN    = $30
OCHRE_GREEN     = $30   ; no real equivalent
OCHRE           = $20   ; no real equivalent
 ENDIF


;#############################################################################
;        include "vcs.h"
;#############################################################################

VSYNC  = $00
VBLANK = $01
WSYNC  = $02
RSYNC  = $03
NUSIZ0 = $04
NUSIZ1 = $05
COLUP0 = $06
COLUP1 = $07
COLUPF = $08
COLUBK = $09
CTRLPF = $0A
REFP0  = $0B
REFP1  = $0C
PF0    = $0D
PF1    = $0E
PF2    = $0F
RESP0  = $10
POSH2  = $11
RESP1  = $11
RESM0  = $12
RESM1  = $13
RESBL  = $14
AUDC0  = $15
AUDC1  = $16
AUDF0  = $17
AUDF1  = $18
AUDV0  = $19
AUDV1  = $1A
GRP0   = $1B
GRP1   = $1C
ENAM0  = $1D
ENAM1  = $1E
ENABL  = $1F
HMP0   = $20
HMP1   = $21
HMM0   = $22
HMM1   = $23
HMBL   = $24
VDELP0 = $25
VDELP1 = $26
VDELBL = $27
RESMP0 = $28
RESMP1 = $29
HMOVE  = $2A
HMCLR  = $2B
CXCLR  = $2C

CXM0P  = $30
CXM1P  = $31
CXP0FB = $32
CXP1FB = $33
CXM0FB = $34
CXM1FB = $35
CXBLPF = $36
CXPPMM = $37
INPT0  = $38
INPT1  = $39
INPT2  = $3A
INPT3  = $3B
INPT4  = $3C
INPT5  = $3D

SWCHA  = $280
SWACNT = $281
SWCHB  = $282
SWBCNT = $283
INTIM  = $284
TIMINT = $285

TIM1T  = $294
TIM8T  = $295
TIM64T = $296
T1024T = $297

TIM1I  = $29c
TIM8I  = $29d
TIM64I = $29e
T1024I = $29f


;#############################################################################
;	include "macro.h"
;#############################################################################

; MACRO.H
; Version 1.06, 3/SEPTEMBER/2004

VERSION_MACRO         = 106

;
; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
;
; This file defines DASM macros useful for development for the Atari 2600.
; It is distributed as a companion machine-specific support package
; for the DASM compiler. Updates to this file, DASM, and associated tools are
; available at at http://www.atari2600.org/dasm
;
; Many thanks to the people who have contributed.  If you take issue with the
; contents, or would like to add something, please write to me
; (atari2600@taswegian.com) with your contribution.
;
; Latest Revisions...
;
; 1.06  03/SEP/2004     - nice revision of VERTICAL_BLANK (Edwin Blink)
; 1.05  14/NOV/2003     - Added VERSION_MACRO equate (which will reflect 100x version #)
;                         This will allow conditional code to verify MACRO.H being
;                         used for code assembly.
; 1.04  13/NOV/2003     - SET_POINTER macro added (16-bit address load)
;
; 1.03  23/JUN/2003     - CLEAN_START macro added - clears TIA, RAM, registers
;
; 1.02  14/JUN/2003     - VERTICAL_SYNC macro added
;                         (standardised macro for vertical synch code)
; 1.01  22/MAR/2003     - SLEEP macro added. 
;                       - NO_ILLEGAL_OPCODES switch implemented
; 1.0	22/MAR/2003		Initial release

; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
;   If you do not allow illegal opcode usage, you must include this file 
;   *after* including VCS.H (as the non-illegal opcodes access hardware
;   registers and require them to be defined first).

; Available macros...
;   SLEEP n             - sleep for n cycles
;   VERTICAL_SYNC       - correct 3 scanline vertical synch code
;   CLEAN_START         - set machine to known state on startup
;   SET_POINTER         - load a 16-bit absolute to a 16-bit variable

;-------------------------------------------------------------------------------
; SLEEP duration
; Original author: Thomas Jentzsch
; Inserts code which takes the specified number of cycles to execute.  This is
; useful for code where precise timing is required.
; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
; LEGAL OPCODE VERSION MAY AFFECT FLAGS
; Uses illegal opcode (DASM 2.20.01 onwards).

            MAC SLEEP            ;usage: SLEEP n (n>1)
.CYCLES     SET {1}

                IF .CYCLES < 2
                    ECHO "MACRO ERROR: 'SLEEP': Duration must be > 1"
                    ERR
                ENDIF

                IF .CYCLES & 1
                    IFNCONST NO_ILLEGAL_OPCODES
                        nop 0
                    ELSE
                        bit VSYNC
                    ENDIF
.CYCLES             SET .CYCLES - 3
                ENDIF
            
                REPEAT .CYCLES / 2
                    nop
                REPEND
            ENDM

;-------------------------------------------------------------------------------
; VERTICAL_SYNC
; revised version by Edwin Blink -- saves bytes!
; Inserts the code required for a proper 3 scanline vertical sync sequence
; Note: Alters the accumulator

; OUT: A = 0

             MAC VERTICAL_SYNC
                lda #%1110          ; each '1' bits generate a VSYNC ON line (bits 1..3)
.VSLP1          sta WSYNC           ; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
                sta VSYNC
                lsr
                bne .VSLP1          ; branch until VYSNC has been reset
             ENDM

;-------------------------------------------------------------------------------
; CLEAN_START
; Original author: Andrew Davie
; Standardised start-up code, clears stack, all TIA registers and RAM to 0
; Sets stack pointer to $FF, and all registers to 0
; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
; Use as very first section of code on boot (ie: at reset)
; Code written to minimise total ROM usage - uses weird 6502 knowledge :)

            MAC CLEAN_START
		sei
                cld
            
                ldx #0
                txa
                tay
.CLEAR_STACK    dex
                txs
                pha
                bne .CLEAR_STACK     ; SP=$FF, X = A = Y = 0

            ENDM

;-------------------------------------------------------
; SET_POINTER
; Original author: Manuel Rotschkar
;
; Sets a 2 byte RAM pointer to an absolute address.
;
; Usage: SET_POINTER pointer, address
; Example: SET_POINTER SpritePTR, SpriteData
;
; Note: Alters the accumulator, NZ flags
; IN 1: 2 byte RAM location reserved for pointer
; IN 2: absolute address

            MAC SET_POINTER
.POINTER    SET {1}
.ADDRESS    SET {2}

                LDA #<.ADDRESS  ; Get Lowbyte of Address
                STA .POINTER    ; Store in pointer
                LDA #>.ADDRESS  ; Get Hibyte of Address
                STA .POINTER+1  ; Store in pointer+1

            ENDM

;-------------------------------------------------------
; BOUNDARY byte#
; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
;
; Push data to a certain position inside a page and keep count of how
; many free bytes the programmer will have.
;
; eg: BOUNDARY 5    ; position at byte #5 in page

.FREE_BYTES SET 0   
   MAC BOUNDARY
      REPEAT 256
         IF <. % {1} = 0
            MEXIT
         ELSE
.FREE_BYTES SET .FREE_BYTES + 1
            .byte $00
         ENDIF
      REPEND
   ENDM




;#############################################################################
;        include "xmacro.h"
;#############################################################################

;-------------------------------------------------------
; Usage: TIMER_SETUP lines
; where lines is the number of scanlines to skip (> 2).
; The timer will be set so that it expires before this number
; of scanlines. A WSYNC will be done first.

    MAC TIMER_SETUP
.lines  SET {1}
        lda #(((.lines-1)*76-14)/64)
        sta WSYNC
        sta TIM64T
    ENDM

;-------------------------------------------------------
; Use with TIMER_SETUP to wait for timer to complete.
; You may want to do a WSYNC afterwards, since the timer
; is not accurate to the beginning/end of a scanline.

    MAC TIMER_WAIT
.waittimer
        lda INTIM
        bne .waittimer
    ENDM
 
 
 
    MAC MOVE_PLATFORM
	dec xdly{1}	; Still delaying?
        bne .done	; yes - we're done here

	lda xspeed{1}	; Delay finished, reload the delay variable
        sta xdly{1}
	inc xpos{1}	; Move platform to the left
	lda xpos{1}
	cmp #45		; Reached the edge of the screen?
        bne .done	; no - we're done here

	lda #0		; Reset the position to right edge 
        sta xpos{1}
        jsr Random	; Random initial delay & speed
	and #$7F	; Delay is 0..127 frames
	sta xdly{1}
        and #$03	; Speed is (1..4)*4 => 4..16 frames
	clc
        adc #1
	asl
        asl
	sta xspeed{1}        
.done
     ENDM
 
 
     MAC DRAW_PLATFORM
 	ldy #THICKNESS		; The platform draws on several consecutive lines
.loop:
	ldx xpos{1}
	lda Platform6Wide_0,x	; Draw platform for left half of line
        sta PF0	
	lda Platform6Wide_1,x
        sta PF1	
	lda Platform6Wide_2,x
        sta PF2	
        nop		; Delay until just before second half of line
        nop
        nop		
	lda Platform6Wide_3,x	; Draw platform for right half of line
        sta PF0
        lda Platform6Wide_4,x
        sta PF1
	lda Platform6Wide_5,x
        sta PF2
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)

	dey		; If there's more lines to draw for this platform
        bne .loop	;   then loop back and draw them

        sty PF0		; When all the lines of the platform is drawn then
	sty PF1		; clear the playfield (Y is zero at end of loop)
        sty PF2	
    ENDM
 
 
 
    MAC WSYNC10
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
	sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
    ENDM 
    
;
; NTSC TIMINGS
;
;VSYNC		  3 lines	  191 us
;VBLANK		 37 lines	 2357 us 	
;KERNEL		192 lines 	12228 us
;OVERSCAN	 30 lines	 1910 us
;---------------------------------------
;FRAME TOTAL	262 lines 	16686 us
;
;
; Can do 72 CPU cycles inside a full 'sta WSYNC' period
;

THICKNESS = 4


;###############################################################################
; Variables segment
;###############################################################################
        seg.u 	Variables
	org 	$80

rnd		.byte

xpos0		.byte
xdly0		.byte
xspeed0		.byte

xpos1		.byte
xdly1		.byte
xspeed1		.byte


xpos2		.byte
xdly2		.byte
xspeed2		.byte


xpos3		.byte
xdly3		.byte
xspeed3		.byte


xpos4		.byte
xdly4		.byte
xspeed4		.byte



;###############################################################################
; Code segment
;###############################################################################
	seg Code
        org $f000

Start:
	CLEAN_START

	lda #RED
        sta COLUBK
	lda #WHITE
        sta COLUPF

	lda #1
        sta xspeed1
        sta xspeed0
        sta xspeed2
        sta xspeed3
        sta xspeed4


;
NextFrame
;	VERTICAL_SYNC		; 3 lines - destroys A
        lda #$02      	; Turn on VSYNC signal (D1=1)
        sta VSYNC  
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)

	lsr SWCHB	; Test the Game Reset switch and
    	bcc Start	;   go back to Start and reset is acutated

        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)

	sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        lda #$00    	; Turn off VSYNC signal (D1=0)
        sta VSYNC

                
	; VBLANK for a total of 37 lines,         
	TIMER_SETUP 37

	MOVE_PLATFORM 0
	MOVE_PLATFORM 1
	MOVE_PLATFORM 2
	MOVE_PLATFORM 3
	MOVE_PLATFORM 4


	TIMER_WAIT
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC       ; Wait for SYNC (halts CPU until end of scanline)

	lda #$00        ; Deactivate VBLANK (D1=0)
        sta VBLANK      ; 


Kernel:                    
	WSYNC10	
	WSYNC10
	DRAW_PLATFORM 0

	WSYNC10	
	WSYNC10
	DRAW_PLATFORM 1

	WSYNC10	
	WSYNC10
	DRAW_PLATFORM 2

	WSYNC10	
	WSYNC10
	DRAW_PLATFORM 3

	WSYNC10	
	WSYNC10
	DRAW_PLATFORM 4




	WSYNC10	;110
	WSYNC10	;120
	WSYNC10	;130
	WSYNC10	;140
	WSYNC10	;150
	WSYNC10	;160
	WSYNC10	;170
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)










	SLEEP 14	; give time to finish drawing scanline
	lda #$00
        sta PF0
        sta PF1
        sta PF2		; clear playfield



OverScan:
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        lda #$02        ; Activate VBLANK (D1=1)
        sta VBLANK      ; 
	WSYNC10	;10
	WSYNC10 ;20
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)





;        ldx #27     ; LoaD X with 27
;        lda #$00
osLoop:
;        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
;        dex         ; DEcrement X by 1
;        bne osLoop  ; Branch if Not Equal to 0
        

;        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)
;        TIMER_SETUP 28	; OVERSCAN 28 lines
;        TIMER_WAIT
;        sta WSYNC   ; Wait for SYNC (halts CPU until end of scanline)


	jmp NextFrame
        
        
Random:        
        lda rnd
	asl 
	asl 
	clc
	adc rnd
	clc
	adc #03
	sta rnd
	rts
        
;###############################################################################
; BITMAP DATA
;###############################################################################

Platform6Wide_0:
 hex 0000000000000000000000000000000000000000000000000000000000000000 
 hex 0000000080C0E0F0F0F0703010
 
Platform6Wide_1:
 hex 000000000000000000000000000000000000000000000000000000000103070F 
 hex 1F3F7EFCF8F0E0C08000000000
 
Platform6Wide_2:
 hex 000000000000000000000000000000000000000080C0E0F0F8FC7E3F1F0F0703 
 hex 01000000000000000000000000
 
Platform6Wide_3:
 hex 0000000000000000000000000000000080C0E0F0F0F070301000000000000000 
 hex 00000000000000000000000000
 
Platform6Wide_4:
 hex 00000000000000000103070F1F3F7EFCF8F0E0C0800000000000000000000000 
 hex 00000000000000000000000000
 
Platform6Wide_5:
 hex 80C0E0F0F8FC7E3F1F0F07030100000000000000000000000000000000000000 
 hex 00000000000000000000000000
 
;###############################################################################
; Epilogue
;###############################################################################
	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector





;Start;
;	CLEAN_START

;
;	Now we can finally get into some more interesting
;	stuff.  First lets make the background black
;	(Technically we don't have to do this, since $00=black,
;	and we've already set all that memory to zero.
;	But one easy experiment might be to try different two
;	digit hex values here, and see some different colors
;
;       lda #$FF		;load value into A ("it's a black thing")
;       sta COLUBK	;put the value of A into the background color register

;
;	Do the same basic thing for missile zero...
;	(except missiles are the same color as their associated
;	player, so we're setting the player's color instead
;

;       lda #$55
;       sta COLUP0

;
;	Now we start our main loop
;	like most Atari programs, we'll have distinct
;	times of Vertical Sync, Vertical Blank,
;	Horizontal blank/screen draw, and then Overscan
;
;	So every time we return control to Mainloop.
;	we're doing another television frame of our humble demo
;	And inside mainloop, we'll keep looping through the
;	section labeled Scanloop...once for each scanline
;

;MainLoop
;*********************** VERTICAL SYNC HANDLER
;
;	If you read your Stella Programmer's Guide,
;	you'll learn that bit "D1" of VSYNC needs to be
;	set to 1 to turn on the VSYNC, and then later
;	you set the same bit to zero to turn it off.
;	bits are numbered from right to left, starting
;	with zero...that means VSYNC needs to be set with something
;	like 00000010 , or any other pattern where "D1" (i.e. second
;	bit from the right) is set to 1.  00000010 in binary
;	is two in decimal, so let's just do that:
;

;        lsr SWCHB	; test Game Reset switch
;        bcc Start	; reset?


;	lda  #2
;	sta  VSYNC	; Sync it up you damn dirty television!
			; and that vsync on needs to be held for three scanlines...
			; count with me here,
;	sta  WSYNC	; one... (our program waited for the first scanline to finish...)
;	sta  WSYNC 	; two... (btw, it doesn't matter what we put in WSYNC, it could be anything)
;	sta  WSYNC	; three...

;	We blew off that time of those three scanlines, though theoretically we could have
;	done some logic there...but most programs will definately want the vertical blank time
;	that follows...
;	you might want to do a lot of things in those 37 lines...so many
;	things that you might become like Dirty Harry: "Did I use up 36 scanlines,
;	or 37? Well, to tell you the truth, in all this excitement, I've kinda lost track
;	myself."  So here's what we do...The Atari has some Timers built in.  You set these
;	with a value, and it counts down...then when you're done thinking, you kill time
;	until that timer has clicked to zero, and then you move on.
;
;	So how much time will those 37 scan lines take?
;	Each scanline takes 76 cycles (which are the same thing our clock is geared to)
;	37*76 = 2812 (no matter what Nick Bensema tries to tell us...his "How to Draw
;	A Playfield" is good in a lot of other ways though..to quote the comments from
;	that:
;		 We must also subtract the five cycles it will take to set the
;		 timer, and the three cycles it will take to STA WSYNC to the next
;		 line.  Plus the checking loop is only accurate to six cycles, making
; 		a total of fourteen cycles we have to waste.
;
;	So, we need to burn 2812-14=2798 cycles.  Now, there are a couple of different
;	timers we can use, and Nick says the one we usually use to make it work out right
;	is TIM64T, which ticks down one every 64 cycles.  2798 / 64 = 43.something,
;	but we have to play conservative and round down.
;


        






;	lda  #43	;load 43 (decimal) in the accumulator
;	sta  TIM64T	;and store that in the timer

;	lda #0		;Zero out the VSYNC
;	sta  VSYNC 	; 'cause that time is over

;
;	So RIGHT HERE we can do a ton of game logic, and we don't have
;	to worry too much about how many instructions we're doing,
;	as long as it's less than 37 scanlines worth (if it's not
;	less, your program is a little screwed, and you need to
;   write better time-tighter code, or put the code in the
;   overscan or elsewhere.
;
;*********************** VERTICAL BLANK WAIT-ER
;WaitForVblankEnd
;	lda INTIM	;load timer...
;	bne WaitForVblankEnd	;killing time if the timer's not yet zero

;	ldy #191 	;Y is going to hold how many lines we have to do
			;...we're going to count scanlines here. theoretically
			; since this example is ass simple, we could just repeat
			; the timer trick, but often its important to know
			; just what scan line we're at.
;	sta WSYNC
;	sta VBLANK

			;End the VBLANK period with the zero
			;(since we already have a zero in "A"...or else
			;the BNE wouldn't have let us get here! Atari
			;is full of double use crap like that, and you
			;should comment when you do those tricks)
			;We do a WSYNC just before that so we don't turn on
			;the image in the middle of a line...an error that
			;would be visible if the background color wasn't black.

	;HMM0 is the "horizontal movement register" for Missile 0
	;we're gonna put in a -1 in the left 4 bits ("left nibble",
	; use the geeky term for it)...it's important
	;to note that it's the left 4 bits that metters, what's in the
	;right just doesn't matter, hence the number is #$X0, where
	;X is a digit from 0-F.  In two's complement notation, -1
	;is F if we're only dealing with a single byte.
	;
	; Are you having fun yet?
	;

;	lda #$F0	; -1 in the left nibble, who cares in the right
;	sta HMM0	; stick that in the missile mover

;	sta WSYNC	;wait for one more line, so we know things line up
;	sta HMOVE 	;and activate that movement
			;note...for godawful reasons, you must do HMOVE
			;right after a damn WSYNC. I might be wasting a scanline
			;with this, come to think of it

;*********************** Scan line Loop
;ScanLoop

;	sta WSYNC 	;Wait for the previous line to finish

;	; $D0, $77, $DD, $E0, $DE, $B7
;	lda #$00
 ;       sta PF0

;	lda #$00
;	sta PF1

;	lda #$00
;	sta PF2

;	nop		; pause to let playfield finish drawing
 ;       nop
  ;      nop
;        nop
;        nop;
;	nop
;        nop
;        nop
;        nop
;        nop;
;	nop
;        nop


;	lda #$00
;        sta PF0

;	lda #$00
;	sta PF1

;	lda #$00
;	sta PF2



;	lda #2		;now sticking a 2 in ENAM0 (i.e. bit D1) will enable Missile 0
;	sta ENAM0	;we could've done this just once for the whole program
			;since we never turn it off, but i decided to do it again and
			;again, since usually we'd have to put smarter logic in
			; each horizontal blank
			;
			;so at some point in here, after 68 clock cycles to be exact,
			;TIA will start drawing the line...all the missiles and players
			;and what not better be ready...unless we *really* know what
			;we're doing.

;	dey		;subtract one off the line counter thingy
;	bne ScanLoop	;and repeat if we're not finished with all the scanlines.

;	lda #2		;#2 for the VBLANK...
;	sta WSYNC  	;Finish this final scanline.
;	sta VBLANK 	; Make TIA output invisible for the overscan,
			; (and keep it that way for the vsync and vblank)
;***************************** OVERSCAN CALCULATIONS
;
;I'm just gonna count off the 30 lines of the overscan.
;You could do more program code if you wanted to.


;	ldx #30		;store 30
;OverScanWait
;	 sta WSYNC
;	 dex
;	 bne OverScanWait

;	jmp  MainLoop      ;Continue this loop forver! Back to the code for the vsync etc


; OK, last little bit of crap to take care of.
; there are two special memory locations, $FFFC and $FFFE
; When the atari starts up, a "reset" is done (which has nothing to do with
; the reset switch on the console!) When this happens, the 6502 looks at
; memory location $FFFC (and by extension its neighbor $FFFD, since it's
; seaching for both bytes of a full memory address)  and then goes to the
; location pointed to by $FFFC/$FFFD...so our first .word Start tells DASM
; to put the binary data that we labeled "Start" at the location we established
; with org.  And then we do it again for $FFFE/$FFFF, which is for a special
; event called a BRK which you don't have to worry about now.

;	org $FFFC
;	.word Start
;	.word Start


;Start
;	CLEAN_START

;NextFrame
;        lsr SWCHB	; test Game Reset switch
;        bcc Start	; reset?
; 1 + 3 lines of VSYNC
;	VERTICAL_SYNC
; 37 lines of underscan
;	TIMER_SETUP 37
;        TIMER_WAIT
; 192 lines of frame
;	TIMER_SETUP 192
;        TIMER_WAIT
; 29 lines of overscan
;	TIMER_SETUP 29
;        TIMER_WAIT
; total = 262 lines, go to next frame
;        jmp NextFrame


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;	org $fffc
;        .word Start	; reset vector
;        .word Start	; BRK vector



